!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARRAY_SIZE_IN_ELEMENTS	util.h	22;"	d
AddShader	technique.cpp	/^bool Technique::AddShader(GLenum ShaderType, const char* pShaderText)$/;"	f	class:Technique
AmbientIntensity	lighting_technique.h	/^        GLuint AmbientIntensity;$/;"	m	struct:LightingTechnique::__anon4
AmbientIntensity	lighting_technique.h	/^        GLuint AmbientIntensity;$/;"	m	struct:LightingTechnique::__anon5
AmbientIntensity	lighting_technique.h	/^        GLuint AmbientIntensity;$/;"	m	struct:LightingTechnique::__anon7
AmbientIntensity	lighting_technique.h	/^    float AmbientIntensity;$/;"	m	struct:BaseLight
Atten	lighting_technique.h	/^        } Atten;$/;"	m	struct:LightingTechnique::__anon5	typeref:struct:LightingTechnique::__anon5::__anon6
Atten	lighting_technique.h	/^        } Atten;$/;"	m	struct:LightingTechnique::__anon7	typeref:struct:LightingTechnique::__anon7::__anon8
Attenuation	lighting_technique.h	/^    } Attenuation;$/;"	m	struct:PointLight	typeref:struct:PointLight::__anon3
Ball	j7.cpp	/^enum { Ball, Board }; $/;"	e	enum:__anon9	file:
BaseLight	lighting_technique.h	/^    BaseLight()$/;"	f	struct:BaseLight
BaseLight	lighting_technique.h	/^struct BaseLight$/;"	s
Bind	texture.cpp	/^void Texture::Bind(GLenum TextureUnit)$/;"	f	class:Texture
Board	j7.cpp	/^enum { Ball, Board }; $/;"	e	enum:__anon9	file:
Color	lighting_technique.h	/^        GLuint Color;$/;"	m	struct:LightingTechnique::__anon4
Color	lighting_technique.h	/^        GLuint Color;$/;"	m	struct:LightingTechnique::__anon5
Color	lighting_technique.h	/^        GLuint Color;$/;"	m	struct:LightingTechnique::__anon7
Color	lighting_technique.h	/^    Vector3f Color;$/;"	m	struct:BaseLight
Conjugate	math_3d.cpp	/^Quaternion Quaternion::Conjugate()$/;"	f	class:Quaternion
Constant	lighting_technique.h	/^            GLuint Constant;$/;"	m	struct:LightingTechnique::__anon5::__anon6
Constant	lighting_technique.h	/^            GLuint Constant;$/;"	m	struct:LightingTechnique::__anon7::__anon8
Constant	lighting_technique.h	/^        float Constant;$/;"	m	struct:PointLight::__anon3
ConvexHull	j7.cpp	/^enum Shape { None=0, ConvexHull, TriangleMesh };$/;"	e	enum:Shape	file:
CreateVertexBuffer	tutorial21.cpp	/^    void CreateVertexBuffer()$/;"	f	class:Tutorial21	file:
Cross	math_3d.cpp	/^Vector3f Vector3f::Cross(const Vector3f& v) const$/;"	f	class:Vector3f
Cutoff	lighting_technique.h	/^        GLuint Cutoff;$/;"	m	struct:LightingTechnique::__anon7
Cutoff	lighting_technique.h	/^    float Cutoff;$/;"	m	struct:SpotLight
DiffuseIntensity	lighting_technique.h	/^        GLuint DiffuseIntensity;$/;"	m	struct:LightingTechnique::__anon4
DiffuseIntensity	lighting_technique.h	/^        GLuint DiffuseIntensity;$/;"	m	struct:LightingTechnique::__anon5
DiffuseIntensity	lighting_technique.h	/^        GLuint DiffuseIntensity;$/;"	m	struct:LightingTechnique::__anon7
DiffuseIntensity	lighting_technique.h	/^    float DiffuseIntensity;$/;"	m	struct:BaseLight
Direction	lighting_technique.h	/^        GLuint Direction;$/;"	m	struct:LightingTechnique::__anon4
Direction	lighting_technique.h	/^        GLuint Direction;$/;"	m	struct:LightingTechnique::__anon7
Direction	lighting_technique.h	/^    Vector3f Direction;$/;"	m	struct:DirectionalLight
Direction	lighting_technique.h	/^    Vector3f Direction;$/;"	m	struct:SpotLight
DirectionalLight	lighting_technique.h	/^    DirectionalLight()$/;"	f	struct:DirectionalLight
DirectionalLight	lighting_technique.h	/^struct DirectionalLight : public BaseLight$/;"	s
Enable	technique.cpp	/^void Technique::Enable()$/;"	f	class:Technique
Exp	lighting_technique.h	/^            GLuint Exp;$/;"	m	struct:LightingTechnique::__anon5::__anon6
Exp	lighting_technique.h	/^            GLuint Exp;$/;"	m	struct:LightingTechnique::__anon7::__anon8
Exp	lighting_technique.h	/^        float Exp;$/;"	m	struct:PointLight::__anon3
FOV	pipeline.h	/^        float FOV;$/;"	m	struct:Pipeline::__anon1
FieldDepth	tutorial21.cpp	/^static const float FieldDepth = 20.0f;$/;"	v	file:
FieldWidth	tutorial21.cpp	/^static const float FieldWidth = 10.0f;$/;"	v	file:
Finalize	technique.cpp	/^bool Technique::Finalize()$/;"	f	class:Technique
GetUniformLocation	j7.cpp	/^GLint GetUniformLocation(GLint h_prog, const char* pUniformName)$/;"	f
GetUniformLocation	technique.cpp	/^GLint Technique::GetUniformLocation(const char* pUniformName)$/;"	f	class:Technique
GetWVPTrans	pipeline.cpp	/^const Matrix4f& Pipeline::GetWVPTrans()$/;"	f	class:Pipeline
GetWorldTrans	pipeline.cpp	/^const Matrix4f& Pipeline::GetWorldTrans()$/;"	f	class:Pipeline
GlslHandle	j7.cpp	/^enum GlslHandle { Position=0, TexCoord, Normal };$/;"	g	file:
Height	pipeline.h	/^        float Height;$/;"	m	struct:Pipeline::__anon1
INIT_SHADER_GUARD	InitShader.h	4;"	d
INVALID_UNIFORM_LOCATION	technique.h	54;"	d
IdleCB	tutorial21.cpp	/^    virtual void IdleCB()$/;"	f	class:Tutorial21
Init	lighting_technique.cpp	/^bool LightingTechnique::Init(const char* vshader, const char* fshader)$/;"	f	class:LightingTechnique
Init	technique.cpp	/^bool Technique::Init()$/;"	f	class:Technique
Init	tutorial21.cpp	/^    bool Init()$/;"	f	class:Tutorial21
InitCameraTransform	math_3d.cpp	/^void Matrix4f::InitCameraTransform(const Vector3f& Target, const Vector3f& Up)$/;"	f	class:Matrix4f
InitIdentity	math_3d.h	/^    inline void InitIdentity()$/;"	f	class:Matrix4f
InitPersProjTransform	math_3d.cpp	/^void Matrix4f::InitPersProjTransform(float FOV, float Width, float Height, float zNear, float zFar)$/;"	f	class:Matrix4f
InitRotateTransform	math_3d.cpp	/^void Matrix4f::InitRotateTransform(float RotateX, float RotateY, float RotateZ)$/;"	f	class:Matrix4f
InitScaleTransform	math_3d.cpp	/^void Matrix4f::InitScaleTransform(float ScaleX, float ScaleY, float ScaleZ)$/;"	f	class:Matrix4f
InitShader	InitShader.cpp	/^InitShader(const char* vShaderFile, const char* fShaderFile)$/;"	f
InitTranslationTransform	math_3d.cpp	/^void Matrix4f::InitTranslationTransform(float x, float y, float z)$/;"	f	class:Matrix4f
KeyboardCB	tutorial21.cpp	/^    virtual void KeyboardCB(unsigned char Key, int x, int y)$/;"	f	class:Tutorial21
LIGHTING_TECHNIQUE_H	lighting_technique.h	19;"	d
Lighting	j7.cpp	/^struct Lighting {$/;"	s	file:
LightingTechnique	lighting_technique.cpp	/^LightingTechnique::LightingTechnique()$/;"	f	class:LightingTechnique
LightingTechnique	lighting_technique.h	/^class LightingTechnique : public Technique {$/;"	c
Linear	lighting_technique.h	/^            GLuint Linear;$/;"	m	struct:LightingTechnique::__anon5::__anon6
Linear	lighting_technique.h	/^            GLuint Linear;$/;"	m	struct:LightingTechnique::__anon7::__anon8
Linear	lighting_technique.h	/^        float Linear;$/;"	m	struct:PointLight::__anon3
Load	texture.cpp	/^bool Texture::Load()$/;"	f	class:Texture
MATH_3D_H	math_3d.h	20;"	d
MAX_POINT_LIGHTS	lighting_technique.h	/^    static const unsigned int MAX_POINT_LIGHTS = 2;$/;"	m	class:LightingTechnique
MAX_SPOT_LIGHTS	lighting_technique.h	/^    static const unsigned int MAX_SPOT_LIGHTS = 2;$/;"	m	class:LightingTechnique
Matrix4f	math_3d.h	/^    Matrix4f()$/;"	f	class:Matrix4f
Matrix4f	math_3d.h	/^    Matrix4f(const glm::mat4& gm)$/;"	f	class:Matrix4f
Matrix4f	math_3d.h	/^class Matrix4f$/;"	c
MyAssimp	j7.old.cpp	/^MyAssimp(const std::string& fname, unsigned int pFlags) $/;"	f	struct:MyAssimp
MyAssimp	j7.old.cpp	/^\/* old *\/ struct MyAssimp {$/;"	s	file:
None	j7.cpp	/^enum Shape { None=0, ConvexHull, TriangleMesh };$/;"	e	enum:Shape	file:
Normal	j7.cpp	/^enum GlslHandle { Position=0, TexCoord, Normal };$/;"	e	enum:GlslHandle	file:
Normalize	math_3d.cpp	/^Vector3f& Vector3f::Normalize()$/;"	f	class:Vector3f
Normalize	math_3d.cpp	/^void Quaternion::Normalize()$/;"	f	class:Quaternion
Obj	j7.cpp	/^  Obj($/;"	f	struct:Obj
Obj	j7.cpp	/^struct Obj {$/;"	s	file:
PIPELINE_H	pipeline.h	19;"	d
PassiveMouseCB	tutorial21.cpp	/^    virtual void PassiveMouseCB(int x, int y)$/;"	f	class:Tutorial21
Pause	j7.cpp	/^enum { Quit=1, Pause, Resume };$/;"	e	enum:__anon10	file:
Pipeline	pipeline.h	/^    Pipeline()$/;"	f	class:Pipeline
Pipeline	pipeline.h	/^class Pipeline$/;"	c
Point	j7.cpp	/^  Point() {}$/;"	f	struct:Point
Point	j7.cpp	/^  Point(const glm::vec3& v, const glm::vec3& f, const glm::vec3& n) $/;"	f	struct:Point
Point	j7.cpp	/^struct Point {$/;"	s	file:
PointLight	lighting_technique.h	/^    PointLight()$/;"	f	struct:PointLight
PointLight	lighting_technique.h	/^struct PointLight : public BaseLight$/;"	s
Pos	pipeline.h	/^        Vector3f Pos;$/;"	m	struct:Pipeline::__anon2
Position	j7.cpp	/^enum GlslHandle { Position=0, TexCoord, Normal };$/;"	e	enum:GlslHandle	file:
Position	lighting_technique.h	/^        GLuint Position;$/;"	m	struct:LightingTechnique::__anon5
Position	lighting_technique.h	/^        GLuint Position;$/;"	m	struct:LightingTechnique::__anon7
Position	lighting_technique.h	/^    Vector3f Position;$/;"	m	struct:PointLight
Print	math_3d.h	/^    void Print() const$/;"	f	struct:Vector3f
Quaternion	math_3d.cpp	/^Quaternion::Quaternion(float _x, float _y, float _z, float _w)$/;"	f	class:Quaternion
Quaternion	math_3d.h	/^struct Quaternion$/;"	s
Quit	j7.cpp	/^enum { Quit=1, Pause, Resume };$/;"	e	enum:__anon10	file:
RenderSceneCB	tutorial21.cpp	/^    virtual void RenderSceneCB()$/;"	f	class:Tutorial21
Resume	j7.cpp	/^enum { Quit=1, Pause, Resume };$/;"	e	enum:__anon10	file:
Rotate	math_3d.cpp	/^void Vector3f::Rotate(float Angle, const Vector3f& Axe)$/;"	f	class:Vector3f
Rotate	pipeline.h	/^    void Rotate(float RotateX, float RotateY, float RotateZ)$/;"	f	class:Pipeline
RotateHelp	j7.cpp	/^  RotateHelp(int nrot) $/;"	f	struct:RotateHelp
RotateHelp	j7.cpp	/^struct RotateHelp {$/;"	s	file:
Run	tutorial21.cpp	/^    void Run()$/;"	f	class:Tutorial21
Scale	pipeline.h	/^    void Scale(float ScaleX, float ScaleY, float ScaleZ)$/;"	f	class:Pipeline
SetCamera	pipeline.h	/^    void SetCamera(const Vector3f& Pos, const Vector3f& Target, const Vector3f& Up)$/;"	f	class:Pipeline
SetDirectionalLight	lighting_technique.cpp	/^void LightingTechnique::SetDirectionalLight(const DirectionalLight& Light)$/;"	f	class:LightingTechnique
SetEyeWorldPos	lighting_technique.cpp	/^void LightingTechnique::SetEyeWorldPos(const Vector3f& EyeWorldPos)$/;"	f	class:LightingTechnique
SetMatSpecularIntensity	lighting_technique.cpp	/^void LightingTechnique::SetMatSpecularIntensity(float Intensity)$/;"	f	class:LightingTechnique
SetMatSpecularPower	lighting_technique.cpp	/^void LightingTechnique::SetMatSpecularPower(float Power)$/;"	f	class:LightingTechnique
SetPerspectiveProj	pipeline.h	/^    void SetPerspectiveProj(float FOV, float Width, float Height, float zNear, float zFar)$/;"	f	class:Pipeline
SetPointLights	lighting_technique.cpp	/^void LightingTechnique::SetPointLights(unsigned int NumLights, const PointLight* pLights)$/;"	f	class:LightingTechnique
SetSpotLights	lighting_technique.cpp	/^void LightingTechnique::SetSpotLights(unsigned int NumLights, const SpotLight* pLights)$/;"	f	class:LightingTechnique
SetTextureUnit	lighting_technique.cpp	/^void LightingTechnique::SetTextureUnit(unsigned int TextureUnit)$/;"	f	class:LightingTechnique
SetWVP	lighting_technique.cpp	/^void LightingTechnique::SetWVP(const Matrix4f& WVP)$/;"	f	class:LightingTechnique
SetWorldMatrix	lighting_technique.cpp	/^void LightingTechnique::SetWorldMatrix(const Matrix4f& WorldInverse)$/;"	f	class:LightingTechnique
ShaderObjList	technique.h	/^    typedef std::list<GLuint> ShaderObjList;$/;"	t	class:Technique
Shape	j7.cpp	/^enum Shape { None=0, ConvexHull, TriangleMesh };$/;"	g	file:
SpecialKeyboardCB	tutorial21.cpp	/^    virtual void SpecialKeyboardCB(int Key, int x, int y)$/;"	f	class:Tutorial21
SpotLight	lighting_technique.h	/^    SpotLight()$/;"	f	struct:SpotLight
SpotLight	lighting_technique.h	/^struct SpotLight : public PointLight$/;"	s
TECHNIQUE_H	technique.h	20;"	d
TEXTURE_H	texture.h	20;"	d
Target	pipeline.h	/^        Vector3f Target;$/;"	m	struct:Pipeline::__anon2
Technique	technique.cpp	/^Technique::Technique()$/;"	f	class:Technique
Technique	technique.h	/^class Technique$/;"	c
TexCoord	j7.cpp	/^enum GlslHandle { Position=0, TexCoord, Normal };$/;"	e	enum:GlslHandle	file:
Texture	texture.cpp	/^Texture::Texture(GLenum TextureTarget, const std::string& FileName)$/;"	f	class:Texture
Texture	texture.h	/^class Texture$/;"	c
ToDegree	math_3d.h	30;"	d
ToRadian	math_3d.h	29;"	d
TriangleMesh	j7.cpp	/^enum Shape { None=0, ConvexHull, TriangleMesh };$/;"	e	enum:Shape	file:
Tutorial21	tutorial21.cpp	/^    Tutorial21()$/;"	f	class:Tutorial21
Tutorial21	tutorial21.cpp	/^class Tutorial21 : public ICallbacks$/;"	c	file:
UTIL_H	util.h	20;"	d
Up	pipeline.h	/^        Vector3f Up;$/;"	m	struct:Pipeline::__anon2
Vector2f	math_3d.h	/^    Vector2f()$/;"	f	struct:Vector2f
Vector2f	math_3d.h	/^    Vector2f(float _x, float _y)$/;"	f	struct:Vector2f
Vector2f	math_3d.h	/^struct Vector2f$/;"	s
Vector2i	math_3d.h	/^struct Vector2i$/;"	s
Vector3f	math_3d.h	/^    Vector3f()$/;"	f	struct:Vector3f
Vector3f	math_3d.h	/^    Vector3f(float _x, float _y, float _z)$/;"	f	struct:Vector3f
Vector3f	math_3d.h	/^struct Vector3f$/;"	s
Vertex	tutorial21.cpp	/^    Vertex() {}$/;"	f	struct:Vertex
Vertex	tutorial21.cpp	/^    Vertex(const Vector3f& pos, const Vector2f& tex, const Vector3f& normal)$/;"	f	struct:Vertex
Vertex	tutorial21.cpp	/^struct Vertex$/;"	s	file:
WINDOW_HEIGHT	tutorial21.cpp	33;"	d	file:
WINDOW_WIDTH	tutorial21.cpp	32;"	d	file:
Width	pipeline.h	/^        float Width;$/;"	m	struct:Pipeline::__anon1
WorldPos	pipeline.h	/^    void WorldPos(float x, float y, float z)$/;"	f	class:Pipeline
addrotation	j7.cpp	/^float addrotation = 0.1\/180.0*M_PI;$/;"	v
aiVector3TObtVector3	j7.old.cpp	/^static btVector3 aiVector3TObtVector3(const aiVector3t<float>& in) $/;"	f	struct:MyAssimp
aiVector3TobtVector3	j7.cpp	/^btVector3 aiVector3TobtVector3(const aiVector3t<float>& av)$/;"	f
ambientIntensity	j7.cpp	/^  float ambientIntensity;$/;"	m	struct:Lighting	file:
ballRadius	j7.cpp	/^float ballRadius = -1;$/;"	v
ball_initial_height	j7.cpp	/^float ball_initial_height = 10; \/\/ 0 5$/;"	v
ball_mass	j7.cpp	/^float ball_mass = 1;$/;"	v
ball_model_matrix	j7.cpp	/^glm::mat4 ball_model_matrix;$/;"	v
ballbody	j7.cpp	/^btRigidBody* ballbody;$/;"	v
bco	j7.cpp	/^  btCollisionObject* bco;$/;"	m	struct:Obj	file:
bind_shader_variables2	j7.cpp	/^bool bind_shader_variables2(GLuint h_program)$/;"	f
boardMass	j7.cpp	/^float boardMass=1000;$/;"	v
board_mass	j7.cpp	/^float board_mass = 100;$/;"	v
board_model_matrix	j7.cpp	/^glm::mat4 board_model_matrix;$/;"	v
board_rigid_bodies	j7.cpp	/^std::vector<btRigidBody*> board_rigid_bodies;$/;"	v
bt_triangles	j7.cpp	/^  btTriangleMesh bt_triangles;$/;"	m	struct:Obj	file:
bulletBallBody	j7.cpp	/^btRigidBody* bulletBallBody = NULL;$/;"	v
bulletBoardBody	j7.cpp	/^btRigidBody* bulletBoardBody = NULL;$/;"	v
centerOfMass	j7.old.cpp	/^  aiVector3t<float> centerOfMass()$/;"	f	struct:MyAssimp
centerOfMassOfSimpleClosedPolygon	j7.cpp	/^glm::vec3 centerOfMassOfSimpleClosedPolygon(const std::string& fname)$/;"	f
centerOfMassOfTriangles	j7.old.cpp	/^btVector3 centerOfMassOfTriangles(const Triangles& t) \/\/ Should NOT work for non-spherical objects$/;"	f
color	j7.cpp	/^  glm::vec3 color;$/;"	m	struct:Point	file:
colorizeByVertexPosition	j7.cpp	/^  void colorizeByVertexPosition()$/;"	f	struct:Obj
createBulletObject	j7.cpp	/^  void createBulletObject(Shape shape)$/;"	f	struct:Obj
createMenu	j7.cpp	/^void createMenu(void)$/;"	f
createPoints	j7.cpp	/^  void createPoints(const std::string& fname)$/;"	f	struct:Obj
createTriangles	j7.old.cpp	/^std::vector<Triangle<GLfloat> > createTriangles()$/;"	f	struct:MyAssimp
createTrianglesRecursive	j7.old.cpp	/^  void createTrianglesRecursive(std::vector<Triangle<GLfloat> >& triangles, const struct aiScene *sc, const struct aiNode* node)$/;"	f	struct:MyAssimp
data	j7.cpp	/^  std::vector<Point> data;$/;"	m	struct:Obj	file:
debug_print_bullet_body_transform_matrix	j7.cpp	/^void debug_print_bullet_body_transform_matrix(btRigidBody* body)$/;"	f
display	j7.cpp	/^void display()$/;"	f
distance	j7.cpp	/^float distance(glm::vec3 u, glm::vec3 v)$/;"	f
draw	j7.cpp	/^  void draw() \/\/ fixme take handles as parameters$/;"	f	struct:Obj
dynamicsWorld	j7.cpp	/^btDiscreteDynamicsWorld* dynamicsWorld;$/;"	v
end_height	j7.cpp	/^float end_height = 10;$/;"	v
face	j7.cpp	/^  glm::vec3 face; \/\/ fixme ; need this ? $/;"	m	struct:Point	file:
gProj	j7.cpp	/^glm::mat4 gProj, gWVP, gWorld;$/;"	v
gWVP	j7.cpp	/^glm::mat4 gProj, gWVP, gWorld;$/;"	v
gWorld	j7.cpp	/^glm::mat4 gProj, gWVP, gWorld;$/;"	v
game_done	j7.cpp	/^bool game_done = false;$/;"	v
game_pause	j7.cpp	/^bool game_pause = false;$/;"	v
getDT	j7.cpp	/^float getDT()$/;"	f
getOglTransformMatrix	j7.cpp	/^glm::mat4 getOglTransformMatrix(btRigidBody* body)$/;"	f
gfriction	j7.cpp	/^float gfriction = 0.1;$/;"	v
glmvec3_to_btVector3	j7.cpp	/^btVector3 glmvec3_to_btVector3(const glm::vec3& v)$/;"	f
glutStuff	j7.cpp	/^void glutStuff(int argc, const char *argv[])$/;"	f
grestitution	j7.cpp	/^float grestitution = 0.8;$/;"	v
h	j7.cpp	/^int w = 500, h = 500;     \/\/ Window size$/;"	v
h_AmbientProduct	j7.cpp	/^h_AmbientProduct,$/;"	v
h_DiffuseProduct	j7.cpp	/^h_DiffuseProduct,$/;"	v
h_LightPosition	j7.cpp	/^GLint h_LightPosition,$/;"	v
h_Shineness	j7.cpp	/^h_Shineness; $/;"	v
h_SpecularProduct	j7.cpp	/^h_SpecularProduct,$/;"	v
h_gWVP	j7.cpp	/^GLint h_gWorld, h_gWVP;$/;"	v
h_gWorld	j7.cpp	/^GLint h_gWorld, h_gWVP;$/;"	v
h_mvp	j7.cpp	/^GLint h_mvp  = -1;    $/;"	v
h_normal	j7.cpp	/^GLint h_normal;$/;"	v
h_program	j7.cpp	/^GLuint h_program; \/\/ GLSL h_program handle$/;"	v
h_vcolor	j7.cpp	/^GLint h_vcolor = -1;$/;"	v
h_vpos	j7.cpp	/^GLint h_vpos = -1;$/;"	v
idle	j7.cpp	/^void idle()$/;"	f
importer	j7.cpp	/^  Assimp::Importer importer;$/;"	m	struct:Obj	file:
importer	j7.old.cpp	/^  Assimp::Importer importer;$/;"	m	struct:MyAssimp	file:
incremental_rotation	j7.cpp	/^  static float incremental_rotation;$/;"	m	struct:RotateHelp	file:
incremental_rotation	j7.cpp	/^float RotateHelp::incremental_rotation = 0.24 ;$/;"	m	class:RotateHelp	file:
init_shader_variables	j7.cpp	/^void init_shader_variables()$/;"	f
is_game_complete	j7.cpp	/^bool is_game_complete(btRigidBody* body) $/;"	f
keyDown	j7.cpp	/^void keyDown(unsigned char key, int x, int y)$/;"	f
keySpecialDown	j7.cpp	/^void keySpecialDown(int key, int x, int y)$/;"	f
keySpecialUp	j7.cpp	/^void keySpecialUp(int key, int x, int y)$/;"	f
keyUp	j7.cpp	/^void keyUp(unsigned char key, int x, int y)$/;"	f
light	j7.cpp	/^LightingTechnique* light;$/;"	v
look_eyepos	j7.cpp	/^glm::vec3 look_eyepos = glm::vec3(0, 20.0, 0);    \/\/ Eye Position$/;"	v
m	math_3d.h	/^    float m[4][4];$/;"	m	class:Matrix4f
m_VBO	tutorial21.cpp	/^    GLuint m_VBO;$/;"	m	class:Tutorial21	file:
m_WVPLocation	lighting_technique.h	/^    GLuint m_WVPLocation;$/;"	m	class:LightingTechnique
m_WVPtransformation	pipeline.h	/^    Matrix4f m_WVPtransformation;$/;"	m	class:Pipeline
m_WorldMatrixLocation	lighting_technique.h	/^    GLuint m_WorldMatrixLocation;$/;"	m	class:LightingTechnique
m_WorldTransformation	pipeline.h	/^    Matrix4f m_WorldTransformation;$/;"	m	class:Pipeline
m_blob	texture.h	/^    Magick::Blob m_blob;$/;"	m	class:Texture
m_camera	pipeline.h	/^    } m_camera;$/;"	m	class:Pipeline	typeref:struct:Pipeline::__anon2
m_dirLightLocation	lighting_technique.h	/^    } m_dirLightLocation;$/;"	m	class:LightingTechnique	typeref:struct:LightingTechnique::__anon4
m_directionalLight	tutorial21.cpp	/^    DirectionalLight m_directionalLight;$/;"	m	class:Tutorial21	file:
m_eyeWorldPosLocation	lighting_technique.h	/^    GLuint m_eyeWorldPosLocation;$/;"	m	class:LightingTechnique
m_fileName	texture.h	/^    std::string m_fileName;$/;"	m	class:Texture
m_matSpecularIntensityLocation	lighting_technique.h	/^    GLuint m_matSpecularIntensityLocation;$/;"	m	class:LightingTechnique
m_matSpecularPowerLocation	lighting_technique.h	/^    GLuint m_matSpecularPowerLocation;$/;"	m	class:LightingTechnique
m_normal	tutorial21.cpp	/^    Vector3f m_normal;$/;"	m	struct:Vertex	file:
m_numPointLightsLocation	lighting_technique.h	/^    GLuint m_numPointLightsLocation;$/;"	m	class:LightingTechnique
m_numSpotLightsLocation	lighting_technique.h	/^    GLuint m_numSpotLightsLocation;$/;"	m	class:LightingTechnique
m_pEffect	tutorial21.cpp	/^    LightingTechnique* m_pEffect;$/;"	m	class:Tutorial21	file:
m_pGameCamera	tutorial21.cpp	/^    Camera* m_pGameCamera;$/;"	m	class:Tutorial21	file:
m_pImage	texture.h	/^    Magick::Image* m_pImage;$/;"	m	class:Texture
m_pTexture	tutorial21.cpp	/^    Texture* m_pTexture;$/;"	m	class:Tutorial21	file:
m_persProj	pipeline.h	/^    } m_persProj;$/;"	m	class:Pipeline	typeref:struct:Pipeline::__anon1
m_pointLightsLocation	lighting_technique.h	/^    } m_pointLightsLocation[MAX_POINT_LIGHTS];$/;"	m	class:LightingTechnique	typeref:struct:LightingTechnique::__anon5
m_pos	tutorial21.cpp	/^    Vector3f m_pos;$/;"	m	struct:Vertex	file:
m_rotateInfo	pipeline.h	/^    Vector3f m_rotateInfo;$/;"	m	class:Pipeline
m_samplerLocation	lighting_technique.h	/^    GLuint m_samplerLocation;$/;"	m	class:LightingTechnique
m_scale	pipeline.h	/^    Vector3f m_scale;$/;"	m	class:Pipeline
m_scale	tutorial21.cpp	/^    float m_scale;$/;"	m	class:Tutorial21	file:
m_shaderObjList	technique.h	/^    ShaderObjList m_shaderObjList;$/;"	m	class:Technique
m_shaderProg	technique.h	/^    GLuint m_shaderProg;$/;"	m	class:Technique
m_spotLightsLocation	lighting_technique.h	/^    } m_spotLightsLocation[MAX_SPOT_LIGHTS];$/;"	m	class:LightingTechnique	typeref:struct:LightingTechnique::__anon7
m_tex	tutorial21.cpp	/^    Vector2f m_tex;$/;"	m	struct:Vertex	file:
m_textureObj	texture.h	/^    GLuint m_textureObj;$/;"	m	class:Texture
m_textureTarget	texture.h	/^    GLenum m_textureTarget;$/;"	m	class:Texture
m_worldPos	pipeline.h	/^    Vector3f m_worldPos;$/;"	m	class:Pipeline
main	j7.cpp	/^int main(int argc, const char *argv[])$/;"	f
main	tutorial21.cpp	/^int main(int argc, char** argv)$/;"	f
max_coords	j7.cpp	/^glm::vec3 max_coords = glm::vec3(10,10,10);$/;"	v
max_num_to_rotate	j7.cpp	/^  static int max_num_to_rotate;$/;"	m	struct:RotateHelp	file:
max_num_to_rotate	j7.cpp	/^int RotateHelp::max_num_to_rotate = 100;$/;"	m	class:RotateHelp	file:
menu	j7.cpp	/^void menu(int id){$/;"	f
n	j7.cpp	/^float n = 30;$/;"	v
name	j7.cpp	/^  std::string name;$/;"	m	struct:Obj	file:
normal	j7.cpp	/^  glm::vec3 normal;$/;"	m	struct:Point	file:
num_rotated	j7.cpp	/^  int num_rotated;$/;"	m	struct:RotateHelp	file:
num_to_rotate	j7.cpp	/^  int num_to_rotate;$/;"	m	struct:RotateHelp	file:
num_triangles	j7.cpp	/^  size_t num_triangles; \/\/ keep size here so that glDrawArrays can be used without vector<Point>$/;"	m	struct:Obj	file:
objs	j7.cpp	/^std::vector<Obj> objs;$/;"	v
oglMatrixToGLMMatrix4x4	j7.cpp	/^glm::mat4 oglMatrixToGLMMatrix4x4(btScalar* m)$/;"	f
operator *	math_3d.cpp	/^Quaternion operator*(const Quaternion& l, const Quaternion& r)$/;"	f
operator *	math_3d.cpp	/^Quaternion operator*(const Quaternion& q, const Vector3f& v)$/;"	f
operator *	math_3d.h	/^    inline Matrix4f operator*(const Matrix4f& Right) const$/;"	f	class:Matrix4f
operator *	math_3d.h	/^inline Vector3f operator*(const Vector3f& l, float f)$/;"	f
operator *=	math_3d.h	/^    Vector3f& operator*=(float f)$/;"	f	struct:Vector3f
operator +	math_3d.h	/^inline Vector3f operator+(const Vector3f& l, const Vector3f& r)$/;"	f
operator +=	j7.cpp	/^  RotateHelp& operator+=(const RotateHelp& o)$/;"	f	struct:RotateHelp
operator +=	math_3d.h	/^    Vector3f& operator+=(const Vector3f& r)$/;"	f	struct:Vector3f
operator -	math_3d.h	/^inline Vector3f operator-(const Vector3f& l, const Vector3f& r)$/;"	f
operator -=	math_3d.h	/^    Vector3f& operator-=(const Vector3f& r)$/;"	f	struct:Vector3f
operator <<	j7.cpp	/^std::ostream& operator<<(std::ostream& os, const aiVector3t<float>& v)$/;"	f
operator <<	j7.cpp	/^std::ostream& operator<<(std::ostream& os, const btVector3& v)$/;"	f
operator <<	j7.cpp	/^std::ostream& operator<<(std::ostream& os, const glm::mat4& m)$/;"	f
operator <<	j7.cpp	/^std::ostream& operator<<(std::ostream& os, const glm::vec3& v)$/;"	f
pTexture	j7.cpp	/^  pTexture = new Texture(GL_TEXTURE_2D, "test.png"); \/\/m$/;"	m	struct:Obj	file:
pball	j7.cpp	/^Obj* pball=NULL;$/;"	v
pboard	j7.cpp	/^Obj* pboard=NULL;$/;"	v
rangle	j7.cpp	/^GLfloat rangle = 10;      \/\/ angle to rotate$/;"	v
readShaderSource	InitShader.cpp	/^readShaderSource(const char* shaderFile)$/;"	f
reshape	j7.cpp	/^void reshape(int w, int h)$/;"	f
rigidbody	j7.cpp	/^  btRigidBody* rigidbody;$/;"	m	struct:Obj	file:
rotateBody	j7.cpp	/^  void rotateBody(const btScalar& yaw, const btScalar& roll, const btScalar& pitch)$/;"	f	struct:Obj
rotateBody	j7.cpp	/^void rotateBody( btRigidBody* rb, const btScalar& yaw, const btScalar& roll, const btScalar& pitch)$/;"	f
rotate_angle	j7.cpp	/^  float rotate_angle(int increments)$/;"	f	struct:RotateHelp
rotation	j7.cpp	/^float rotation = 0; $/;"	v
rotationAngle	j7.cpp	/^float rotationAngle=0.1;$/;"	v
rotationFactor	j7.cpp	/^float rotationFactor = 0.1;$/;"	v
rotationHorizontal	j7.cpp	/^float rotationHorizontal = 0, rotationVertical = 0;$/;"	v
rotationVertical	j7.cpp	/^float rotationHorizontal = 0, rotationVertical = 0;$/;"	v
scene	j7.old.cpp	/^  aiScene* scene;$/;"	m	struct:MyAssimp	file:
set_name	j7.cpp	/^  void set_name(const std::string& n) $/;"	f	struct:Obj
set_texture	j7.cpp	/^  bool set_texture()$/;"	f	struct:Obj
t1	j7.cpp	/^std::chrono::time_point<std::chrono::high_resolution_clock> t1,t2;$/;"	v
t2	j7.cpp	/^std::chrono::time_point<std::chrono::high_resolution_clock> t1,t2;$/;"	v
tex	j7.cpp	/^  Texture* tex;$/;"	m	struct:Obj	file:
texture	j7.cpp	/^  glm::vec2 texture;$/;"	m	struct:Point	file:
updateModelMatrix	j7.cpp	/^  void updateModelMatrix()$/;"	f	struct:Obj
vbo	j7.cpp	/^  GLuint vbo;$/;"	m	struct:Obj	file:
vertex	j7.cpp	/^  glm::vec3 vertex; $/;"	m	struct:Point	file:
view	j7.cpp	/^glm::mat4 view;$/;"	v
w	j7.cpp	/^int w = 500, h = 500;     \/\/ Window size$/;"	v
w	math_3d.h	/^    float x, y, z, w;$/;"	m	struct:Quaternion
world_gravity	j7.cpp	/^float world_gravity= -5;$/;"	v
world_matrix	j7.cpp	/^  glm::mat4 world_matrix;$/;"	m	struct:Obj	file:
x	math_3d.h	/^    float x, y, z, w;$/;"	m	struct:Quaternion
x	math_3d.h	/^    float x;$/;"	m	struct:Vector2f
x	math_3d.h	/^    float x;$/;"	m	struct:Vector3f
x	math_3d.h	/^    int x;$/;"	m	struct:Vector2i
y	math_3d.h	/^    float x, y, z, w;$/;"	m	struct:Quaternion
y	math_3d.h	/^    float y;$/;"	m	struct:Vector2f
y	math_3d.h	/^    float y;$/;"	m	struct:Vector3f
y	math_3d.h	/^    int y;$/;"	m	struct:Vector2i
z	math_3d.h	/^    float x, y, z, w;$/;"	m	struct:Quaternion
z	math_3d.h	/^    float z;$/;"	m	struct:Vector3f
zFar	pipeline.h	/^        float zFar;$/;"	m	struct:Pipeline::__anon1
zNear	pipeline.h	/^        float zNear;$/;"	m	struct:Pipeline::__anon1
~MyAssimp	j7.old.cpp	/^~MyAssimp() $/;"	f	struct:MyAssimp
~Technique	technique.cpp	/^Technique::~Technique()$/;"	f	class:Technique
~Tutorial21	tutorial21.cpp	/^    ~Tutorial21()$/;"	f	class:Tutorial21
